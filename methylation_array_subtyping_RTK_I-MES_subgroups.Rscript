#!/bin/R-3.4.3

# methylation_array_subtyping_RTK_I-MES_subgroups.Rscript
#
# 20190720
# Mike
#
########################################
#
# WHAT THIS DOES
#
########################################
# takes the RTK_I and MES H016 tumour samples; gets the methylation array data
#
# clusters these based on the top5k most variable probes -> gives us 3 groups:
#		(i) true RTK_I	(ii) intermediate	(iii) true MES
#
# Visualise this methylation array heatmap along with other data levels showing the
# "continuum" between RTK_I and MES:
#
#	1. SOX10 GX (in TPM)
#	2. Wang 2017 PN/MES ssGSEA scores
#	3. MR activity (VIPER NES) for the n=15 MES and n=4 RTK_I CRC MRs (from Carl)
#	4. GX of the Wang 2017 PN/MES genes
#	5. K27ac t-scores showing relative activation of MES/RTK_I SEs (from Carl)
#	6. expression scores for SE-defined "identity genes" from subtype-unique RTK_I/MES SEs (from Carl)
# 	7. GX of myeloid marker genes that are referred to in Fig 6 / in vivo results
#
########################################
#
# LOCATIONS - input files, etc.
#
########################################
#
# use as analysis dir: /icgc/dkfzlsdf/analysis/hipo/hipo_016/sox10_KD_microarray/
# contains samplesheets named above
#
# raw input microarray data in subdir ./data/
#
########################################
#
# OUTPUTS
#
########################################
#
# to analysis dir: /icgc/dkfzlsdf/analysis/hipo/hipo_016/analysis/methylation_array_subtyping/
#
# three major outputs: the methylation heatmap with many column/sample annotations, 
# 		and separately: the Wang PN/MES and myeloid marker gene heatmaps
#
################################################################################
#
# start code
#
################################################################################
######################################
#
# SETUP - set output dir
#
######################################
# define cluster analysis basedir:
clustering.dir <- "/icgc/dkfzlsdf/analysis/hipo/hipo_016/cluster_450k/"

# define output directory
outputdir <- "/icgc/dkfzlsdf/analysis/hipo/hipo_016/analysis/methylation_array_subtyping/"
# work in this dir
setwd(outputdir)

###################
#
# LOAD LIBRARIES
#
###################
suppressMessages( library(minfi) )
suppressMessages( library(ggplot2) )
suppressMessages( library(IlluminaHumanMethylation450kanno.ilmn12.hg19) )
suppressMessages( library(IlluminaHumanMethylation450kmanifest) )
# new heatmap function 
suppressMessages( library(heatmap.plus) )
# heatmap colours
suppressMessages( library(marray) )
cols <- colorRampPalette(c("blue", "white", "red"))(100)
# pass to 'col' in heatmap function
#
# load ComplexHeatmap lib
suppressMessages( library(ComplexHeatmap) )
# GRN analysis
suppressMessages(library(RTN))
suppressMessages(library(viper))
# annotation libraries for VIPER analysis (mapping microarray probe IDs)
suppressMessages(library(hgu133a.db))
# for gene set testing
suppressMessages(library(npGSEA))
suppressMessages(library(GSVA))

# need to do this otherwise can't load data as currently coded
options(stringsAsFactors = FALSE)

# for output images: do NOT use dingbats font
# set in base R devices option; all outputs are pdf so cool:
pdf.options(useDingbats=FALSE)
# set again
options(useDingbats=FALSE)

# load common HIPO016 code
source("/home/fletcher/git_repos/gbm-master-regulators/gbm_hipo016_common.R")
# source R code with functions, etc. from RTN analysis
source("/home/fletcher/git_repos/gbm-master-regulators/gbm_rtn_analysis_common.R")

# re-define working dir (as sourcing the rtn analysis common code changed it)
setwd(outputdir)

######################################
#
# LOAD DATA
# DON'T USE MINFI!
#
######################################
# load metadata: get only the 60 clearly subtyped samples
# use RDS object with many metadata:
metadata <- readRDS(path.metadata.rds)
# sort metadata by AK ID (it should be already but just in case)
metadata <- metadata[ order(metadata$ak_id), ]

# define samples to keep for subtype-specific analysis: 
# keep RTK_I and MES only
metadata <- metadata[ metadata$subtype_final=="RTK_I" | metadata$subtype_final=="MES", ]
# need to re-level this factor to remove those two levels:
metadata$subtype_final <- factor(metadata$subtype_final)

# sanity check:
message("Sanity check in metadata: how many rows/samples are there? Should be 31")
dim(metadata)

# read in sample sheet
# copied into the output dir for today's analysis also
# don't use minfi; build basenames on our own below 
targets <- read.csv( file=paste( clustering.dir, "HIPO016_GBM_subtyping_FINAL_20170120.csv", sep="/") )

# take only the samples that are present in the filtered metadata set:
targets <- targets[ match(metadata$ak_id, targets$ak_id), ]

# also rename the "targets" metadata to "pd" to feed into the code from the script
pd <- targets

# load the pre-processed per-sample Rdata files
# have to build my own pathsf
array.db <- "/b06x-lsdf/IlmnArrayDB/minfi2/" # dir with per-array folders (Sentrix ID)
# paste together array db, then the $idat column from the read-in samplesheet, split for array Id and then the filename
basenames <- paste( array.db, unlist( strsplit( x=targets$idat, split="_" ) )[ seq(from=1,by=2,to=dim(targets)[1]*2) ], "/", targets$idat, ".RData", sep="")

##########################################################################################
# load data!
# return as list
# each of the list members has "Mset" obj; so in turn load each sample
betas.list <- lapply( X=basenames, FUN= function(sample)
                  {
                    message(sample)
                    load(sample)
                    betas <- getBeta( Mset, type="Illumina" )
                    return(betas)
                  }
               )
# returns a list of vectors (= beta values) with names (=probeIDs)
# #probes differs depending on whether you have 450k or EPIC 

# so now: create 2 dfs, one for each array platform
dat.epic <- do.call( cbind, betas.list[ pd$array_type == "IlluminaHumanMethylationEPIC" ] )
dat.450k <- do.call( cbind, betas.list[ pd$array_type == "IlluminaHumanMethylation450k" ] )
# add IDs from pd
colnames(dat.epic) <- pd$ak_id[ pd$array_type == "IlluminaHumanMethylationEPIC" ]
colnames(dat.450k) <- pd$ak_id[ pd$array_type == "IlluminaHumanMethylation450k" ]

# and then merge these two by row names:
dat <- merge( dat.epic, dat.450k, by="row.names" )

# tidy up df: move Row.names column to actual rownames and drop it
rownames(dat) <- dat$Row.names
dat <- dat[ , !(colnames(dat) %in% "Row.names") ]
# reorder by colnames also:
dat <- dat [, order( colnames(dat) ) ]

# sanity check: 
dim(dat)
# should yield 452453 probes x 31 samples

# remove list after use
rm(betas.list)

######################################
# build filter: remove poor quality probes also
######################################
# from volker's code - cluster_v12c.R
# probe filter lists
amb.filter <- read.table("/icgc/dkfzlsdf/analysis/B060/iskar/panDNAmeth/scripts/filter-probes/amb_3965probes.vh20151030.txt", header=F)$V1
epic.filter <- read.table("/icgc/dkfzlsdf/analysis/B060/iskar/panDNAmeth/scripts/filter-probes/epicV1B2_32260probes.vh20160325.txt", header=F)$V1
snp.filter <- read.table("/icgc/dkfzlsdf/analysis/B060/iskar/panDNAmeth/scripts/filter-probes/snp_7998probes.vh20151030.txt", header=F)$V1
xy.filter <- read.table("/icgc/dkfzlsdf/analysis/B060/iskar/panDNAmeth/scripts/filter-probes/xy_11551probes.vh20151030.txt", header=F)$V1

probes.filter <- unique(c(amb.filter, epic.filter, snp.filter, xy.filter))

message("\nNumber of probes to filter out of analysis (from Volker's files):")
length(probes.filter)
# 53622 removed.

# remove these from the dat matrix:
dat <- dat[ !(rownames(dat) %in% probes.filter), ]

# how many left?
dim(dat)
# 431162 rows x 31 samples

###################
#
# CLUSTER
#
###################
##############
# SAMPLE + FEATURE SELECTION:
# use all samples that have been selected; filter for good quality probes
dat3 <- dat

# sanity check
dim(dat3)
#[1] 431162     31

# calculate row sds (row = probe)
dat3 <- transform(dat3, SD=apply(dat3, 1, sd, na.rm = TRUE))

# take rownames (probeIDs) for the top 5k most var probes
selection <- row.names( dat3[ order(dat3$SD, decreasing=T), ] )[1:5000]
length(selection)

# generate new dataframe with selected probes
dat.filt <- dat[ match(selection, row.names(dat)), ]

# sanity check
dim(dat.filt)
#[1] 5000    30

###################
#
# USE WARD.D LINKAGE FOR CLUSTERING + EUCLIDEAN AS DISTANCE
# as used by Volker in Dominik's 2012 paper
#
# use 'dendextend' to reorder the leaves of the dendrogram
#
###################
hclust.method <- "ward.D"

message( "Calculating distances for clustering..." )

# calculate distances of columns - work on transverse of dat.filt
dat.dist <- dist( t(dat.filt) )
# cluster based on distance matrix
dat.clust <- as.dendrogram( hclust( dat.dist, method=hclust.method ) )

# cluster based on rows = probes
row.dist <- dist( dat.filt )
row.clust <- as.dendrogram( hclust( row.dist, method=hclust.method ) )

# now use dendextend
library(dendextend)
# based on https://cran.r-project.org/web/packages/dendextend/vignettes/introduction.html#changing-a-dendrograms-structure
# can pass a vector of labels; try that
sample.order <- c(
"AK002","AK043","AK142","AK217","AK051","AK156","AK165","AK049","AK149","AK173","AK003","AK183", # RTK_I
    "AK071","AK079","AK134","AK006","AK088","AK218","AK081","AK072","AK195","AK091", # transition
    "AK055","AK005","AK030","AK185","AK153","AK139","AK227","AK188","AK236" # MES
)
# now use rotate():
dat.clust.reorder <- rotate(dat.clust, order=sample.order)

################################################################
#
# RUN ssGSEA for Wang 2018 signatures
#
################################################################
# read in the 2017 Wang subtype gene signatures directly as GeneSets
# see ipynb 20190502 on GB mice - have vectors of the gene IDs extracted from the 'ssgsea.GBM.classification' package
# included in the 2017 Wang manuscript
#
# do for PN/MES only, of course.
#
# MES, 2017  
wang.mes <- GeneSet( geneIds=c('ARPC1B','S100A11','CTSC','GLIPR1','NNMT','VDR','RGS2','CTSB','TGFBI','PLAUR','LY96','BCL3','TNFAIP8','IER3','PRSS23','IL7R','RAB27A','RUNX1','P4HA2','CYP1B1','BACE2','ACPP','FTL','SLPI','RAC2','RARRES1','SYNGR2','THBS1','IL6','CAV1','PI3','CDCP1','ITGB1','LOX','CD72','COL1A2','ANPEP','MMP7','SPAG4','BNC2','NDRG1','CNN2','LUM','PTGS2','COL3A1','COL5A1','SDC1','COL1A1','GPRC5A','COL15A1'),
             setName="Mesenchymal")
# PN, 2017  
wang.pn <- GeneSet( geneIds=c('HN1','RAB33A','HDAC2','MYT1','MTSS1','HOXD3','GPR17','PTTG1','KLRC3','HRASLS','TCP1','NPPA','PFDN2','CA10','EPHB1','UGT8','PAK7','SLC1A1','NARF','DCTN3','SMPD3','ZNF804A','RASL11B','MYB','PDGFRA','ERBB3','CLGN','SOX10','BCL11A','NMU','ZNF643','CDKN1C','JPH3','PCDHA9','IL1RAPL1','MAST1','VIPR2','SIM2','BAMBI','PKMYT1','PLCB4','SLC17A6','KLRK1','CENPJ','NHLH1','GABRB3','KLRC4','KCNK3','GRID2','DACH1'),
             setName="Proneural")

# and set up as GeneSetCollection
wang.signatures <- GeneSetCollection( c(wang.mes, wang.pn) )
#   
#
# from above: use as gx matrix full set
# as input expr matrix: use the voom matrix for these samples...
load(path.rnaseq.matrix)
eset <- voom.tmm$E[,colnames(voom.tmm$E) %in% metadata$ak_id] 
# replace gene IDs in rownames with symbols to match viper objs; get from limma results df
rownames(eset) <- limma.idh$hgnc_symbol[ match(rownames(eset), rownames(limma.idh)) ]

# run GSVA:
wang.signatures.gsva <- gsva(eset, wang.signatures, method="ssgsea", annotation="SYMBOL", mx.diff=FALSE, verbose=TRUE, parallel.sz=1, rnaseq=TRUE)

################################################################
#
# LOAD SAMPLE ANNOS FROM CARL
#	1. netA VIPER scores
#	2. K27ac t-scores in MES/RTK_I SEs
#	3. SE identity gene sig GX scores.
#
################################################################
# as per emails 20190719: load from these paths
#
# VIPER scores for MRs
path.viper.res.netA <- "/icgc/dkfzlsdf/analysis/hipo/hipo_016/user_folder/herrmanc/analysis/2019-04-13_VIPER/results/tf.act.test.crctf.rds"
viper.test <- readRDS(path.viper.res.netA)
#
# K27ac t-scores
path.k27ac.t.scores <- "/icgc/dkfzlsdf/analysis/hipo/hipo_016/user_folder/herrmanc/analysis/2019-07-10_SE_RTKI_MES_signal/out/t.stat_enhancers_MES_RTK1.rds"
k27ac.t <- readRDS(path.k27ac.t.scores)
#
# SE identity gene sig scores 
path.id.scores <- "/icgc/dkfzlsdf/analysis/hipo/hipo_016/user_folder/herrmanc/analysis/2019-07-10_SE_RTKI_MES_signal/out/sig.exp.wide.rds"
id.scores <- readRDS(path.id.scores)

######
#
# add to the anno.df below.
#
###################
#
# generate sample anno df:
#
###################
# generate anno df: 
# order by sample ID
anno.df <- data.frame(
  sample=colnames(dat.filt)
)

# populate with Wang subtype ssGSEA scores
anno.df$Wang_Mesenchymal <- wang.signatures.gsva["Mesenchymal", match(anno.df$sample, colnames(wang.signatures.gsva))]
anno.df$Wang_Proneural <- wang.signatures.gsva["Proneural", match(anno.df$sample, colnames(wang.signatures.gsva))]

# add in SOX10 GX from 'targets' df
anno.df$SOX10 <- targets$gxSOX10_log2_fpkm.1[ match(anno.df$sample, targets$ak_id) ]
#
# move sample ID to rownames and remove 
rownames(anno.df) <- anno.df$sample
anno.df <- anno.df[,-1]

# add in Carl's annos, as loaded above:
#
# add SE activity - note only have for the ChIPseq samples!!
anno.df$SE_activity <- k27ac.t$t[ match(rownames(anno.df), k27ac.t$sample) ]
#
# add identity gene sig scores for MES/RTK_I:
anno.df$SE_identity_MES <- id.scores$MES[ match(rownames(anno.df), id.scores$sample) ]
anno.df$SE_identity_RTK_I <- id.scores$RTK_I[ match(rownames(anno.df), id.scores$sample) ]

# add in MR activity, for each of the 15 MES MRs and 4 RTK_I CRC MRs (Fig 3)
mrs.mes <- c("CEBPA","EGR2","FLI1","FOXD2","IRF2","IRF8","JUN","KLF3","KLF4","MAFB","MITF","NR4A2","RXRA","SREBF1","STAT3")
mrs.rtki <- c("LHX2","NFIL3","SOX4","SOX10")
# get the values, match row order of the anno.df
mat.mr.mes <- viper.test[ rownames(viper.test) %in% mrs.mes, match(rownames(anno.df), colnames(viper.test)) ]
mat.mr.rtki <- viper.test[ rownames(viper.test) %in% mrs.rtki, match(rownames(anno.df), colnames(viper.test)) ]
# add MR_activity_ to rownames:
rownames(mat.mr.mes) <- paste0("MR_activity_", rownames(mat.mr.mes))
rownames(mat.mr.rtki) <- paste0("MR_activity_", rownames(mat.mr.rtki))

# add to anno.df
anno.df <- cbind(anno.df, t(mat.mr.mes), t(mat.mr.rtki))

###################
#
# PLOT + GENERATE OUTPUTS
#
###################
# generate heatmap annotations:
# subtypes
# for colours: see below. pass a list, for each column in predicted.subtypes a vector mapping subtype->colour:
ha <- ComplexHeatmap::HeatmapAnnotation( 
    df=data.frame(subtype=metadata$subtype_final),
    col=list(
    subtype=c( "MES"="#377eb8", "RTK_I"="#4daf4a" )
     ),
    na_col="black", show_annotation_name=TRUE, show_legend=TRUE
 )

# per-sample bottom annotation:
#
# use as input anno.df generated above, remove "sample" column to rownames:
#
# get indices of the MR activity cols cos makes next bit of code cleaner
indices.mr <- grepl(pattern="MR_activity_", x=colnames(anno.df))
# define viridis colour scale for MR activity, hardcoded
cols.mra <- c("#00204DFF", "#7C7B78FF", "#FFEA46FF")
# for SOX10 generate color ramp to map continuous GX log2(fpkm+1) values - for first arg breaks, specify actual values in data
# for ESTIMATE scores, map from min/max scores, via 0; map to colours: from purples (to match TCC high scores = purpler) to white (0) to brown
# for subtype sig ssGSEA results: barplots, colour by subtype
# for MR activity: colour with darkblue-yellow palette
ha.bottom <- ComplexHeatmap::HeatmapAnnotation( 
        SOX10 = anno_points(anno.df$SOX10, axis=TRUE, axis_side="left"), 
        Wang_Mesenchymal = anno_barplot(anno.df$Wang_Mesenchymal, axis=TRUE, axis_side="left", gp=gpar(fill=subtype.colours["MES"])),
        Wang_Proneural = anno_barplot(anno.df$Wang_Proneural, axis=TRUE, axis_side="left", gp=gpar(fill=subtype.colours["RTK_I"])),
		SE_K27ac_activity = anno_points(anno.df$SE_activity, axis=TRUE, axis_side="left"),
		SE_identity_MES = anno_barplot(anno.df$SE_identity_MES, axis=TRUE, axis_side="left", gp=gpar(fill=subtype.colours["MES"])),
		SE_identity_RTK_I = anno_barplot(anno.df$SE_identity_RTK_I, axis=TRUE, axis_side="left", gp=gpar(fill=subtype.colours["RTK_I"])),
        MR_activity_NFIL3 = anno.df$MR_activity_NFIL3,
        MR_activity_LHX2 = anno.df$MR_activity_LHX2,
        MR_activity_SOX10 = anno.df$MR_activity_SOX10,
        MR_activity_SOX4 = anno.df$MR_activity_SOX4,    		
        MR_activity_CEBPA = anno.df$MR_activity_CEBPA,
        MR_activity_EGR2 = anno.df$MR_activity_EGR2,
        MR_activity_FLI1 = anno.df$MR_activity_FLI1,
        MR_activity_FOXD2 = anno.df$MR_activity_FOXD2,
        MR_activity_IRF2 = anno.df$MR_activity_IRF2,
        MR_activity_IRF8 = anno.df$MR_activity_IRF8,
        MR_activity_JUN = anno.df$MR_activity_JUN,
        MR_activity_KLF3 = anno.df$MR_activity_KLF3,
        MR_activity_KLF4 = anno.df$MR_activity_KLF4,
        MR_activity_MAFB = anno.df$MR_activity_MAFB,
        MR_activity_MITF = anno.df$MR_activity_MITF,
        MR_activity_NR4A2 = anno.df$MR_activity_NR4A2,
        MR_activity_RXRA = anno.df$MR_activity_RXRA,
        MR_activity_SREBF1 = anno.df$MR_activity_SREBF1,
        MR_activity_STAT3 = anno.df$MR_activity_STAT3,
    show_legend = c( TRUE, rep(FALSE,times=18) ), # show legend for first MR activity but not others
   col=list(
       # all MR activity have same colour scale based on global min/max
	   # hardcode the same viridis "E" colour palette that's blue-yellow (can't use the function because it's SOME OLD  BULLSHIT VERSION ARGH)
	   # 
        MR_activity_CEBPA=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_EGR2=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_FLI1=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_FOXD2=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_IRF2=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_IRF8=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_JUN=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_KLF3=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_KLF4=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_MAFB=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_MITF=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_NR4A2=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_RXRA=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_SREBF1=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_STAT3=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_NFIL3=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_LHX2=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_SOX10=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra),
        MR_activity_SOX4=circlize::colorRamp2(c(min(anno.df[,indices.mr]),0, max(anno.df[,indices.mr])),cols.mra)
    ),
    na_col="grey", show_annotation_name=TRUE, height = unit(10, "cm"), gap = unit(0, "mm")        
 )
        
# generate title with extra info
title <- paste("Hierarchical clustering of n=", dim(dat.filt)[2], " HIPO016 GBM samples (methylation array data)\n", 
	dim(dat.filt)[1], " most variable probes in RTK_I/MES common to 450k and EPIC platforms\nEuclidean distance, hclust method: ", hclust.method, sep="")

# FINALLY: we can plot the cheeky beggar
# generate Heatmap() object...
#
# options:
# use as input matrix feature df, coerced to matrix
# col = cols (defined in setup)
# column_title = title defined above
# name = heatmap name (used in legend)
# row_title = title of rows (description of what's the rows, ofc)
# cluster_rows and cluster_columns - self explanatory, use dendros from above
# set column_dend_reorder=F to USE these damn dendros!
# don't show row/col names (too many!)
# for top annotation use generated above
hm <- ComplexHeatmap::Heatmap( matrix=as.matrix(dat.filt), col=cols, 
  column_title=title, name="Methylation (beta)", row_title=paste( dim(dat.filt)[1], "most variable probes" ),
  cluster_rows=row.clust, cluster_columns=dat.clust.reorder, show_row_names=FALSE, show_column_names=TRUE,
  column_dend_reorder=F,                            
  use_raster=T, # rasterise heatmap!
  top_annotation=ha, bottom_annotation=ha.bottom )
        
# output...
pdf( paste( Sys.Date(), "_450k_EPIC_GBM_RTK_I-MES_heatmap_rasterised.pdf", sep=""), width=10, height=16)
# move heatmap legend (beta scale) to right
# move subtype prediction legend to left
# add padding to bottom/left/top/right hand side
ComplexHeatmap::draw( hm, heatmap_legend_side = "right", annotation_legend_side = "left", padding=unit(c(1,1,1,2), "cm") )
dev.off()

# output non-raster version also
hm <- ComplexHeatmap::Heatmap( matrix=as.matrix(dat.filt), col=cols, 
  column_title=title, name="Methylation (beta)", row_title=paste( dim(dat.filt)[1], "most variable probes" ),
  cluster_rows=row.clust, cluster_columns=dat.clust.reorder, show_row_names=FALSE, show_column_names=TRUE,
  column_dend_reorder=F,                            
  top_annotation=ha, bottom_annotation=ha.bottom )
        
# output...
pdf( paste( Sys.Date(), "_450k_EPIC_GBM_RTK_I-MES_heatmap.pdf", sep=""), width=10, height=16)
# move heatmap legend (beta scale) to right
# move subtype prediction legend to left
# add padding to bottom/left/top/right hand side
ComplexHeatmap::draw( hm, heatmap_legend_side = "right", annotation_legend_side = "left", padding=unit(c(1,1,1,2), "cm") )
dev.off()

####################
#
# separately produce a heatmap of the signature genes,
# can't vertically concatenate so match column/sample order:
#
####################
# extract the column order from this heatmap, otherwise can't make this line up:
col.ord <- colnames(dat.filt)[column_order(hm)]
#
# extract from the GX mat used in VIPER, match column order:
mat.gx.sigs <- eset[ match(c(wang.pn@geneIds,wang.mes@geneIds),rownames(eset)), 
                    match( col.ord, colnames(eset)) ]

# drop missing genes=NAs
mat.gx.sigs <- mat.gx.sigs[!is.na(rownames(mat.gx.sigs)),]

# convert to z-scores of genes/rows:
mat.gx.sigs.z <- t(scale(t(mat.gx.sigs)))

# generate row annotation: match remaining rownames to the source sig
mat.gx.anno <- rowAnnotation(
  df=data.frame( Subtype=c( 
      rep("PN",times=length(wang.pn@geneIds[wang.pn@geneIds %in% rownames(mat.gx.sigs)])),
      rep("MES",times=length(wang.mes@geneIds[wang.mes@geneIds %in% rownames(mat.gx.sigs)]))
                            ) ),
    col=list(Subtype=c( "MES"="#377eb8", "PN"="#4daf4a" ))
)

# output:
# colours for z-scores of GX heatmap: use PuOr rev
# define as breaks: min, 1st quartile, mean, 3rd quartile, max
# drop the 'median' from the output of summary()
cols.z <- circlize::colorRamp2( breaks=summary(c(mat.gx.sigs.z))[-3], colors=rev(RColorBrewer::brewer.pal(5, "PuOr")) )

# generate heatmap obj; add row anno
p <- Heatmap( as.matrix(mat.gx.sigs.z), col=cols.z, name="z-scores of GX\n(log-cpm)", 
    column_names_gp = gpar(fontsize = 8), show_column_names=TRUE,
	clustering_method_rows="ward.D2", clustering_distance_rows=function(x) as.dist(1-cor(t(x))), 
    cluster_columns=FALSE, # do not cluster cols! already matching order 
    row_dend_width = unit(2, "cm"),
	row_title=paste( nrow(mat.gx.sigs.z), " PN/MES genes (Wang)" ), row_names_gp=gpar(fontsize=4),
    column_title_gp = gpar(fontsize = 9), show_row_names=TRUE, use_raster=T ) + mat.gx.anno

# open plotting device
pdf( paste( Sys.Date(), "_450k_EPIC_GBM_RTK_I-MES_heatmap_GXsigs_rasterised.pdf", sep=""), width=10, height=6)
# move heatmap legend (beta scale) to right
# move subtype prediction legend to left
# add padding to bottom/left/top/right hand side
ComplexHeatmap::draw( p, heatmap_legend_side = "right", annotation_legend_side = "left", padding=unit(c(1,1,1,2), "cm") )
dev.off()

####################
#
# new 20191223
# separately produce a heatmap of myeloid marker genes (ref. Fig6 / in vivo data)
# can't vertically concatenate so match column/sample order, as above
#
####################
# use ths same order as the Wang heatmap above
#
# define marker genes to plot
# ITGAM = CD11b
marker.myeloid <- c("AIF1","ITGAM","CD68","CD163","CX3CL1","CD80") 
#
# extract from the GX mat used in VIPER, match column order:
mat.gx.myeloid <- eset[ match(marker.myeloid,rownames(eset)), 
                    match( col.ord, colnames(eset)) ]

# drop missing genes=NAs
mat.gx.myeloid <- mat.gx.myeloid[!is.na(rownames(mat.gx.myeloid)),]

# convert to z-scores of genes/rows:
mat.gx.myeloid.z <- t(scale(t(mat.gx.myeloid)))

# output:
# colours for z-scores of GX heatmap: use PuOr rev
# define as breaks: min, 1st quartile, mean, 3rd quartile, max
# drop the 'median' from the output of summary()
cols.z <- circlize::colorRamp2( breaks=summary(c(mat.gx.myeloid.z))[-3], colors=rev(RColorBrewer::brewer.pal(5, "PuOr")) )

# generate heatmap obj; add row anno
p <- Heatmap( as.matrix(mat.gx.myeloid.z), col=cols.z, name="z-scores of GX\n(log-cpm)", 
    column_names_gp = gpar(fontsize = 8), show_column_names=TRUE,
	clustering_method_rows="ward.D2", clustering_distance_rows=function(x) as.dist(1-cor(t(x))), 
    cluster_columns=FALSE, # do not cluster cols! already matching order 
    row_dend_width = unit(2, "cm"),
	row_title=paste( nrow(mat.gx.myeloid.z), " myeloid marker genes" ), row_names_gp=gpar(fontsize=4),
    column_title_gp = gpar(fontsize = 9), show_row_names=TRUE, use_raster=T )

# open plotting device
pdf( paste( Sys.Date(), "_450k_EPIC_GBM_RTK_I-MES_heatmap_myeloid_markers_rasterised.pdf", sep=""), width=10, height=6)
# move heatmap legend (beta scale) to right
# move subtype prediction legend to left
# add padding to bottom/left/top/right hand side
ComplexHeatmap::draw( p, heatmap_legend_side = "right", annotation_legend_side = "left", padding=unit(c(1,1,1,2), "cm") )
dev.off()

########################################
#
# save copy Renv and session info:
#
########################################
seshinf <- paste ( Sys.Date(), "_450k_EPIC_GBM_RTK_I-MES_heatmap_sessionInfo.txt", sep="")
writeLines(capture.output(sessionInfo()), seshinf)

# Renv
outputname <- paste( Sys.Date(), "_450k_EPIC_GBM_RTK_I-MES_heatmap_end_Renv.Rdata", sep="")
save.image(file=outputname)