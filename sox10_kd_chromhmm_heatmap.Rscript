#!/bin/R-3.4.3
#
# sox10_kd_chromhmm_heatmap.Rscript
# 20180621
#
# Mike
#
################ 
# WHAT THIS DOES
################
#
# from the cell line NT and shSOX10 ChromHMM data, produces a ChromHMM heatmap
# of the cell line states at tumour-defined MES/RTK_I enhancers.
#
################ 
# INPUT DATA
################
# 
# 	1) MES/RTK_I-specific active enhancers, as defined in tumours; output of enhancers_active_subtype_analysis.Rscript 
#			these would be in output directory /icgc/dkfzlsdf/analysis/hipo/hipo_016/analysis/chipseq_active_enhancers_by_subtype/bed_files
#			with name: GBM_enhancers_active_MES-specific_FDR_0.1_log2FC_1.bed
#	2) ChromHMM functional states for the SOX10 KD experiment
#			as in: /icgc/dkfzlsdf/analysis/hipo/hipo_016/yonghe/new/BinarizeBam/ - see below for full paths
#
################ 
# OUTPUT
################
# 
# 	single pdf with the ChromHMM heatmap
#
################ 
# REQUIRED CLUSTER MODULES - load me...!
################
#
# load R-bundle, v3.4.3:
#     module load R-bundle/20171215-foss-2017a-R-3.4.3
#
################################ 
#
# START ANALYSIS
#
################################
# load libs
suppressMessages( library(ChIPpeakAnno) )
suppressMessages( library(ggplot2) )
suppressMessages( library(RColorBrewer) )
suppressMessages( library(rtracklayer) )
suppressMessages( library(circlize) )
# load Epik 
suppressMessages( library(epik) )
suppressMessages( library(EnrichedHeatmap) )
# load TX annotation lib
suppressMessages(library(org.Hs.eg.db))

################
# source zuguang's epik config file for the hipo016 project
################
# can also use library(epik) if that is up-to-date
load_epik_config("/icgc/dkfzlsdf/analysis/hipo/hipo_016/analysis/WGBS_final_cohort/script/hipo16_config_epik.R")

# don't load text in tables as factors
options(stringsAsFactors=F)

# load common HIPO016 code
source("/home/fletcher/git_repos/gbm-master-regulators/gbm_hipo016_common.R")

# define and set output dir (previously created)
output.dir <- "/icgc/dkfzlsdf/analysis/hipo/hipo_016/analysis/chipseq_sox10_enhancers/"
setwd(output.dir)

################
# load sample metadata:
################
# use RDS object with many metadata:
metadata <- readRDS(path.metadata.rds)
# sort metadata by AK ID (it should be already but just in case)
metadata <- metadata[ order(metadata$ak_id), ]

# filter for RTK_I or MES samples with ChIPseq data:
metadata <- metadata[ metadata$subtype_final=="RTK_I" | metadata$subtype_final=="MES", ]
metadata <- metadata[ metadata$data_chipseq_H3K4me1==T, ]

# colour definitions
state_name = c("TssA", "TssFlnk", "TssFlnkU", "TssFlnkD", "Tx", "TxWk", "EnhG1", "EnhG2", "EnhA1", "EnhA2", "EnhWk", "ZNF/Rpts", "Het",
    "TssBiv", "EnhBiv", "ReprPC", "ReprPCWk", "Quies")
names(state_name) = paste0("E", ifelse(nchar(1:18) == 1, "0", ""), 1:18)
state_col = c("#FF0000", "#FF4500", "#FF4500", "#FF4500", "#008000", "#006400",
    "#C2E105", "#C2E105", "#FFC34D", "#FFC34D", "#FFFF00", "#66CDAA", "#8A91D0",
    "#CD5C5C", "#BDB76B", "#808080", "#C0C0C0", "#FFFFFF")
names(state_col) = names(state_name)

# now: use epik to load the ChromHMM states for each subtype
# see ipynb 20180207 also
#
# get chromhmm states for contrasting subtype
# set merge=T to get consensus
states.rtki <- get_chromHMM_list( metadata$ak_id[metadata$subtype_final=="RTK_I"], merge=T)
states.mes <- get_chromHMM_list( metadata$ak_id[metadata$subtype_final=="MES"], merge=T)

# now: also load for each of the cell lines, in turn:
# load chromhmm 4-col beds (chrom, start, end, state) as text and coerce to gr to match tumour data loaded above
states.nt <- read.bed("/icgc/dkfzlsdf/analysis/hipo/hipo_016/yonghe/new/BinarizeBam/CON/CON_18_segments.bed", colnames=c("chrom", "start", "end", "states") )
states.sh <- read.bed("/icgc/dkfzlsdf/analysis/hipo/hipo_016/yonghe/new/BinarizeBam/DOX/DOX_18_segments.bed", colnames=c("chrom", "start", "end", "states") )

# now: extract only the ranges that correspond to enhancer states E07-10 - drop E11 EnhWk, to pass to below
states.rtki.enh <- states.rtki[states.rtki$states %in% names(state_name)[7:10]]
states.mes.enh <- states.mes[states.mes$states %in% names(state_name)[7:10]]
# here the states mcols are called 'l'.
states.nt.enh <- states.nt[states.nt$l %in% names(state_name)[7:10]]
states.sh.enh <- states.sh[states.sh$l %in% names(state_name)[7:10]]

# next: load the tumour enhancers
# use the most recently defined set of subtype-specific ones, at least:
# define colnames
colnames <- c("chrom", "start", "end", "name", "FC", "strand")
# load for RTK_I
input.bed <- "/icgc/dkfzlsdf/analysis/hipo/hipo_016/analysis/chipseq_active_enhancers_by_subtype/bed_files/GBM_enhancers_active_RTK_I-specific_FDR_0.1_log2FC_1.bed"
enh.rtki <- read.bed(input.bed, colnames=colnames)
# MES
input.bed <- "/icgc/dkfzlsdf/analysis/hipo/hipo_016/analysis/chipseq_active_enhancers_by_subtype/bed_files/GBM_enhancers_active_MES-specific_FDR_0.1_log2FC_1.bed"
enh.mes <- read.bed(input.bed, colnames=colnames)
#
# combine into single GR with split = subtype
# need to strip metadata cols first
mcols(enh.rtki) <- NULL
mcols(enh.mes) <- NULL
# recombine, split = subtype
enh <- c(enh.rtki, enh.mes)
enh$subtype <- c( rep("RTK_I", times=length(enh.rtki)), rep("MES", times=length(enh.mes)) )

############################################################
#
# coerce states to numeric values, 1-18
# then map heatmap colours to those values
#
############################################################
# first: rename all states in loaded states GRs to remove the trailing E
states.rtki$states <- as.numeric(gsub( pattern="E", replacement="", x=states.rtki$states ))
states.mes$states <- as.numeric(gsub( pattern="E", replacement="", x=states.mes$states ))
# here the states mcols are called 'l'.
states.nt$l <- as.numeric(gsub( pattern="E", replacement="", x=states.nt$l ))
states.sh$l <- as.numeric(gsub( pattern="E", replacement="", x=states.sh$l ))

###############
#
# okay: follow zuguang's suggestion in email today
#
# otherwise the normalizeToMatrix() function will get averages of the state values, heh
#
# states_normal$value = as.numeric(gsub("_.*$", "", states_normal$states))
# mat = normalizeToMatrix(states_normal, tss[1:1000], value_column = "value")
# EnrichedHeatmap(mat, col = colorRamp2(1:7, state_col), cluster_rows = TRUE)
# 
# Basically, you need to:
# 1. reduce the number of states, e.g. merge 1-4 as active tss states, 16-17 as repressive states
# 2. assign a value for each simplified states, e.g. 1 for active states 2 for tx states, ...
# 3. make the normalized matrix 
# 4. visualize the matrix as heatmap with define color for each state
#
# so let's do that: first, reduce state number in new mcol
#
# based on state_name: map 1-4 to Tss, 5-6 to Tx, 7-11 to Enh, 12-13 to Het/Rpts, 14-15 to Biv, 16-17 to ReprPC, 18 to Quiescent
reduce_ChromHMM_18states <- function( states )
{
    # take input states vector, and then map as above
    # TSS to 1
    states[ states==1 | states==2 | states==3 | states==4 ] <- 1
    # Tx to 2
    states[ states==5 | states==6 ] <- 2
	
    # Enh to 3
    states[ states==7 | states==8 | states==9 | states==10 | states==11 ] <- 3
    # Het/Rpts to 4
    states[ states==12 | states==13 ] <- 4
    # Biv to 5
    states[ states==14 | states==15 ] <- 5
    # ReprPc to 6
    states[ states==16 | states==17 ] <- 6
    # Quiescent to 7
    states[ states==18 ] <- 7
    # return mapped states vector
    return(states)
}
# now add in as new col
states.rtki$states_reduced  <- reduce_ChromHMM_18states(states.rtki$states)
states.mes$states_reduced  <- reduce_ChromHMM_18states(states.mes$states)
states.nt$states_reduced  <- reduce_ChromHMM_18states(states.nt$l)
states.sh$states_reduced  <- reduce_ChromHMM_18states(states.sh$l)

# re normalize matrices:
# Zuguang's example works because he does not set a target region with a width
# so normalizeToMatrix() won't average out values
# so let's define the enhancer set as the centre of the peak, then normalize to that
#
# find centre of enhancer peaks: make copy of GR and then replace values in IRanges
enh.centres <- enh
start(enh.centres) <- mid(ranges(enh))
end(enh.centres) <- start(enh.centres)

###############
# extend by 10000bp around the enhancer midpoint; use 200bp windows, for chromhmm works in those
# set value_column=states_reduced, as defined above.
#
# do for each sample in turn:
#
# cell line, nt and sh
# 
mat.enh.nt <- normalizeToMatrix( states.nt, enh.centres, extend=10000, w=200, value_column="states_reduced" )
mat.enh.sh <- normalizeToMatrix( states.sh, enh.centres, extend=10000, w=200, value_column="states_reduced" )
# tumours
mat.enh.rtki  <- normalizeToMatrix( states.rtki, enh.centres, extend=10000, w=200, value_column="states_reduced" )
mat.enh.mes  <- normalizeToMatrix( states.mes, enh.centres, extend=10000, w=200, value_column="states_reduced" )

# heatmap cols: as per zuguang above
cols <- colorRamp2(1:7, state_col[c(1,5,7,12,14,16,18)])

# heatmaps
# no top_anno as it makes no sense here, hah
ht.list <- EnrichedHeatmap(mat.enh.rtki, col = cols, name = "ChromHMM states", width = 1,
		      top_annotation = NULL, top_annotation_height = NULL, row_title_rot = 90, axis_name_gp = gpar(fontsize = 4),
              column_title = "RTK_I tumours", column_title_gp = gpar(fontsize = 6), row_title_gp = gpar( fontsize = 6 ),
              border=TRUE, pos_line=FALSE, axis_name=c("-10kbp", "summit", "+10kbp"),
              split=enh$subtype, show_heatmap_legend=FALSE ) +
            EnrichedHeatmap(mat.enh.nt, col = cols, name = "ChromHMM states", width = 1,
		      top_annotation = NULL, top_annotation_height = NULL, row_title_rot = 90, axis_name_gp = gpar(fontsize = 4),
              border=TRUE, pos_line=FALSE, axis_name=c("-10kbp", "summit", "+10kbp"),
              column_title = "LN229 NT", column_title_gp = gpar(fontsize = 6), show_heatmap_legend=FALSE ) +
            EnrichedHeatmap(mat.enh.sh, col = cols, name = "ChromHMM states", width = 1,
		      top_annotation = NULL, top_annotation_height = NULL, row_title_rot = 90, axis_name_gp = gpar(fontsize = 4),
              border=TRUE, pos_line=FALSE, axis_name=c("-10kbp", "summit", "+10kbp"),
              column_title = "LN229 shSOX10", column_title_gp = gpar(fontsize = 6), show_heatmap_legend=FALSE ) +
            EnrichedHeatmap(mat.enh.mes, col = cols, name = "ChromHMM states", width = 1,
		      top_annotation = NULL, top_annotation_height = NULL, row_title_rot = 90, axis_name_gp = gpar(fontsize = 4),
              border=TRUE, pos_line=FALSE, axis_name=c("-10kbp", "summit", "+10kbp"),
              column_title = "MES tumours", column_title_gp = gpar(fontsize = 6), show_heatmap_legend=FALSE )        

# single legend for the heatmaps
lgd <- Legend(
    at = c("TSS", "Tx", "Enh", "Het/Rpts", "Biv", "ReprPC", "Qui"), type = "grid",
    grid_height = unit(2, "mm"), grid_width = unit(2, "mm"), gap = unit(1, "mm"),
    title = "ChromHMM states", title_gp = gpar(fontsize = 6, fontface = "bold"), labels_gp = gpar(fontsize = 5),
    legend_gp = gpar(fill = state_col[c(1,5,7,12,14,16,18)]) # pass fill for a 'grid' legend
) 
            
# output as PDF: 
# generate outputname
outputname <- paste0("SOX10_KD_ChromHMM_at_H016_MES-RTK_I_enhancers_allStatesReduced_", Sys.Date(), ".pdf")
# open plotting device
pdf(file=outputname, width=6, height=4)
# draw legend also
draw(ht.list, gap=unit(1,"cm"), annotation_legend_list = list(lgd) )
dev.off()

###############
# repeat, but do for MES enhancers only
#
# heatmaps
# no top_anno as it makes no sense here, hah
ht.list <- EnrichedHeatmap(mat.enh.rtki[enh$subtype=="MES",], col = cols, name = "ChromHMM states", width = 1,
		      top_annotation = NULL, top_annotation_height = NULL, row_title_rot = 90, axis_name_gp = gpar(fontsize = 4),
              column_title = "RTK_I tumours", column_title_gp = gpar(fontsize = 6), row_title_gp = gpar( fontsize = 6 ),
              border=TRUE, pos_line=FALSE, axis_name=c("-10kbp", "summit", "+10kbp"), show_heatmap_legend=FALSE ) +
            EnrichedHeatmap(mat.enh.nt[enh$subtype=="MES",], col = cols, name = "ChromHMM states", width = 1,
		      top_annotation = NULL, top_annotation_height = NULL, row_title_rot = 90, axis_name_gp = gpar(fontsize = 4),
              border=TRUE, pos_line=FALSE, axis_name=c("-10kbp", "summit", "+10kbp"),
              column_title = "LN229 NT", column_title_gp = gpar(fontsize = 6), show_heatmap_legend=FALSE ) +
            EnrichedHeatmap(mat.enh.sh[enh$subtype=="MES",], col = cols, name = "ChromHMM states", width = 1,
		      top_annotation = NULL, top_annotation_height = NULL, row_title_rot = 90, axis_name_gp = gpar(fontsize = 4),
              border=TRUE, pos_line=FALSE, axis_name=c("-10kbp", "summit", "+10kbp"),
              column_title = "LN229 shSOX10", column_title_gp = gpar(fontsize = 6), show_heatmap_legend=FALSE ) +
            EnrichedHeatmap(mat.enh.mes[enh$subtype=="MES",], col = cols, name = "ChromHMM states", width = 1,
		      top_annotation = NULL, top_annotation_height = NULL, row_title_rot = 90, axis_name_gp = gpar(fontsize = 4),
              border=TRUE, pos_line=FALSE, axis_name=c("-10kbp", "summit", "+10kbp"),
              column_title = "MES tumours", column_title_gp = gpar(fontsize = 6), show_heatmap_legend=FALSE )        

# single legend for the heatmaps
lgd <- Legend(
    at = c("TSS", "Tx", "Enh", "Het/Rpts", "Biv", "ReprPC", "Qui"), type = "grid",
    grid_height = unit(2, "mm"), grid_width = unit(2, "mm"), gap = unit(1, "mm"),
    title = "ChromHMM states", title_gp = gpar(fontsize = 6, fontface = "bold"), labels_gp = gpar(fontsize = 5),
    legend_gp = gpar(fill = state_col[c(1,5,7,12,14,16,18)]) # pass fill for a 'grid' legend
) 
            
# output as PDF: 
# generate outputname
outputname <- paste0("SOX10_KD_ChromHMM_at_H016_MES_enhancers_allStatesReduced_", Sys.Date(), ".pdf")
# open plotting device
pdf(file=outputname, width=6, height=3)
# draw legend also
draw(ht.list, gap=unit(1,"cm"), annotation_legend_list = list(lgd) )
dev.off()

############################################################
############################################################
#
#
# SAVE COPY OF SESSION INFO
#
#
############################################################
############################################################
message( "Saving session info...")
# session info
seshinf <- paste ( Sys.Date(), "_SOX10_KD_ChromHMM_heatmap_sessionInfo.txt", sep="")
writeLines(capture.output(sessionInfo()), seshinf)