#!/bin/R-3.4.3

########################################
#
# superenhancer_analysis_03_run_analysis.Rscript
#
# Mike Fletcher
# 20201025
#
# R version used: 3.4.3
#
# (original name: superenhancers_subtype_03_run_analysis.Rscript)
#
########################################
#
# WHAT THIS DOES
#
########################################
#
# For each GBM subtype:
#	1) loads the per-sample enhancer signal in the correct subtype
#	2) generates some basic summary statistic plots + combined enhancer list with sample signal
#	3) finds the nearest protein coding gene (in Gencode v19, by distance)
#	2) calls SEs - using code very lightly adapted from the ROSE2 analysis pipeline (Bradner lab/Rick Young)
#		see: 
#			http://younglab.wi.mit.edu/super_enhancer_code.html for info
#			https://github.com/BradnerLab/pipeline for code
#	3) generates many output from this SE calling
#
########################################
# INPUTS
########################################
#
# Gencode v19 transcriptome reference, as GRanges
# metadata sheet with sample AK IDs and subtypes
# per-sample H3K27ac signal files (output of superenhancer_analysis_02_calculate_sample_signal.sh)
#
########################################
# OUTPUTS
########################################
#
#	lots of tables, plots, etc., including:
#	1) basic summary stats for the SE signal;
#	2) tables containing the enhancers/superenhancers/stretchenhancers with additional annotation
#	3) plots from the ROSE2 pipeline.
#	4) session information (.txt)
#
########################################
# RESOURCE USAGE
########################################
#
#   moderately large data but computation is not heavy.
#
########################################

##############################
#
# MIT License - as per https://github.com/BradnerLab/pipeline/blob/master/LICENSE
#
##############################
#
# The MIT License (MIT)
# 
# Copyright (c) 2014 Charles Lin (Bradner Lab)
#     and Collaborators:
#         John DiMatteo
#         Nick Semenkovich | semenko@alum.mit.edu | https://nick.semenkovich.com
#         Xin Zhong
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# # # # # COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##############################

##############################
#
# FUNCTIONS
#
##############################
################
# FUNCTION TO ADD SOME HUMAN-READABLE GENE NAMES
#
# use function from the RNAseq BioC workflow tutorial...:
convertIDs <- function( ids, from, to, db, ifMultiple=c("putNA", "useFirst")) {
  stopifnot( inherits( db, "AnnotationDb" ) )
  ifMultiple <- match.arg( ifMultiple )
  suppressWarnings( selRes <- AnnotationDbi::select(
    db, keys=ids, keytype=from, columns=c(from,to) ) )
  if ( ifMultiple == "putNA" ) {
    duplicatedIds <- selRes[ duplicated( selRes[,1] ), 1 ]
    selRes <- selRes[ ! selRes[,1] %in% duplicatedIds, ]
  }
  return( selRes[ match( ids, selRes[,1] ), 2 ] )
}
################

#============================================================================
#==============SUPER-ENHANCER CALLING AND PLOTTING FUNCTIONS=================
#============================================================================

 #This function calculates the cutoff by sliding a diagonal line and finding where it is tangential (or as close as possible)
 calculate_cutoff <- function(inputVector, drawPlot=TRUE,...){
 	inputVector <- sort(inputVector)
	inputVector[inputVector<0]<-0 #set those regions with more control than ranking equal to zero
	slope <- (max(inputVector)-min(inputVector))/length(inputVector) #This is the slope of the line we want to slide. This is the diagonal.
	xPt <- floor(optimize(numPts_below_line,lower=1,upper=length(inputVector),myVector= inputVector,slope=slope)$minimum) #Find the x-axis point where a line passing through that point has the minimum number of points below it. (ie. tangent)
	y_cutoff <- inputVector[xPt] #The y-value at this x point. This is our cutoff.
	
	if(drawPlot){  #if TRUE, draw the plot
		plot(1:length(inputVector), inputVector,type="l",...)
		b <- y_cutoff-(slope* xPt)
		abline(v= xPt,h= y_cutoff,lty=2,col=8)
		points(xPt,y_cutoff,pch=16,cex=0.9,col=2)
		abline(coef=c(b,slope),col=2)
		title(paste("x=",xPt,"\ny=",signif(y_cutoff,3),"\nFold over Median=",signif(y_cutoff/median(inputVector),3),"x\nFold over Mean=",signif(y_cutoff/mean(inputVector),3),"x",sep=""))
		axis(1,sum(inputVector==0),sum(inputVector==0),col.axis="pink",col="pink") #Number of regions with zero signal
	}
	return(list(absolute=y_cutoff,overMedian=y_cutoff/median(inputVector),overMean=y_cutoff/mean(inputVector)))
}

#this is an accessory function, that determines the number of points below a diagnoal passing through [x,yPt]
numPts_below_line <- function(myVector,slope,x){
	yPt <- myVector[x]
	b <- yPt-(slope*x)
	xPts <- 1:length(myVector)
	return(sum(myVector<=(xPts*slope+b)))
}

convert_stitched_to_bed <- function(inputStitched,trackName,trackDescription,outputFile,splitSuper=TRUE,score=c(),superRows=c(),baseColor="0,0,0",superColor="255,0,0"){
	outMatrix <- matrix(data="",ncol=4+ifelse(length(score)==nrow(inputStitched),1,0),nrow=nrow(inputStitched))
	
	outMatrix[,1] <- as.character(inputStitched$chrom)
	outMatrix[,2] <- as.character(inputStitched$start)
	outMatrix[,3] <- as.character(inputStitched$end)
	outMatrix[,4] <- as.character(inputStitched$name)
	if(length(score)==nrow(inputStitched)){
		score <- rank(score,ties.method="first")
		score <- length(score)-score+1  #Stupid rank only does smallest to largest. 
		outMatrix[,5] <- as.character(score)
	}
	trackDescription <- paste(trackDescription,"\nCreated on ",format(Sys.time(), "%b %d %Y"),collapse="",sep="")
	trackDescription <- gsub("\n","\t", trackDescription)
	tName <- gsub(" ","_",trackName)
	cat('track name="', tName,'" description="', trackDescription,'" itemRGB=On color=',baseColor,"\n",sep="",file=outputFile)
	write.table(file= outputFile,outMatrix,sep="\t",quote=FALSE,row.names=FALSE,col.names=FALSE,append=TRUE)
	if(splitSuper==TRUE){
		cat("\ntrack name=\"Super_", tName,'" description="Super ', trackDescription,'" itemRGB=On color=', superColor,"\n",sep="",file=outputFile,append=TRUE)
		write.table(file= outputFile,outMatrix[superRows,],sep="\t",quote=FALSE,row.names=FALSE,col.names=FALSE,append=TRUE)
	}
}

writeSuperEnhancer_table <- function(superEnhancer,description,outputFile,additionalData=NA){
	description <- paste("#",description,"\nCreated on ",format(Sys.time(), "%b %d %Y"),collapse="",sep="")
	description <- gsub("\n","\n#",description)
	cat(description,"\n",file=outputFile)
	if(is.matrix(additionalData)){
		if(nrow(additionalData)!=nrow(superEnhancer)){
			warning("Additional data does not have the same number of rows as the number of super enhancers.\n--->>> ADDITIONAL DATA NOT INCLUDED <<<---\n")
		}else{
			superEnhancer <- cbind(superEnhancer,additionalData)
			superEnhancer = superEnhancer[order(superEnhancer$enhancerRank),]
			
		}
	}
	write.table(file=outputFile,superEnhancer,sep="\t",quote=FALSE,row.names=FALSE,append=TRUE)
}

#============================================================================
#============================HELPER FUNCTIONS================================
#============================================================================

#http://stackoverflow.com/questions/9837766/r-plot-circle-with-radius-1-and-angle-0-2pi-in-polar-coordinates
circle <- function(x, y, rad = 1, nvert = 500, ...){
    rads <- seq(0,2*pi,length.out = nvert)
    xcoords <- cos(rads) * rad + x
    ycoords <- sin(rads) * rad + y
    polygon(xcoords, ycoords, ...)
}

magnitude <- function(x,y){
	magnitudeVector=c()
	for(i in 1:length(x)){
		
		magnitudeVector = c(magnitudeVector,sqrt((x[i])^2 + (y[i])^2))

	}
	return(magnitudeVector)

}

geneToRefseq <- function(geneName,transcribedTable){
	refseqIDs = c()
	rowID = which(transcribedTable[,3] == geneName)
	for(row in rowID){
		refseqIDs = c(refseqIDs,as.character(transcribedTable[row,2]))
	}
	
	return(refseqIDs)

	
}

#get the row by enhancer ID for enhancer tables that are sorted uniquely
enhancerIDToRow <- function(enhancerID,targetTable){
	return(which(targetTable[,1]==enhancerID))
	
}

#gets genes associated w/ an enhancer by ID
getEnhancerGenes <- function(enhancerID,enhancerTable){
	
	enhancerGenes = c()
	row = enhancerIDToRow(enhancerID,enhancerTable)
		
	foo = as.character(enhancerTable[row,7])
	enhancerGenes = c(enhancerGenes,unlist(strsplit(foo,',')))
		foo = as.character(enhancerTable[row,8])
		enhancerGenes = c(enhancerGenes,unlist(strsplit(foo,',')))
		foo = as.character(enhancerTable[row,9])
		enhancerGenes = c(enhancerGenes,unlist(strsplit(foo,',')))
	
	enhancerGenes = unique(enhancerGenes)
	return(enhancerGenes)
	
}

getRefseqIDs <- function(enhancerIDList,enhancerTable,transcribedTable){
	
	refIDs = c()
	for(enhancerID in enhancerIDList){
		
		enhancerGenes = getEnhancerGenes(enhancerID,enhancerTable)
		for(geneName in enhancerGenes){
			
			refIDs = c(refIDs,geneToRefseq(geneName,transcribedTable))
			
		}
	}
	#print(refIDs)
	return(refIDs)
}

##############################
#
# setup: load libs, definitions, etc.
#
##############################
# load libs:
suppressMessages(library(rtracklayer))
suppressMessages(library(ggplot2))
# load TX annotation lib
suppressMessages(library(org.Hs.eg.db))

# output/analysis dir: define + set
output.dir <- "/icgc/dkfzlsdf/analysis/hipo/hipo_016/analysis/chipseq_superenhancers"
setwd(output.dir)

# make new plots subdir
system2("mkdir", "plots")

# define path to the by-sample-id basedir for the ChIPseq data:
path.chipseq <- "/icgc/dkfzlsdf/analysis/hipo/hipo_016/chipseq_newAlignments/wgs_bowtie" 

# load Zuguang's txdb from the new WGBS analysis - gencode v19, coding only
txdb.path <- "/icgc/dkfzlsdf/analysis/hipo/hipo_016/analysis/WGBS_final_cohort/txdb/gencode19_protein_coding_txdb.sqlite"
txdb <- loadDb(txdb.path)
# get genes
genes <- genes(txdb)
# add gene symbols based on looking up ENSG in this Zuguang's TXDB GR of genes (loaded above):
#
# now: remove the trailing .XX from the ENSG ID and then look this up, to get symbols:
genes$symbol <- convertIDs( sapply(strsplit( genes$gene_id, "[.]"), "[", 1), from="ENSEMBL", to="SYMBOL", org.Hs.eg.db)
# remove genes without a symbol
genes <- genes[ !is.na(genes$symbol) ]

# read in sample metadata:
# use RDS object with many metadata:
metadata <- readRDS("/icgc/dkfzlsdf/analysis/hipo/hipo_016/analysis/WGBS_final_cohort/metadata/HIPO016_GBM_subtyping_FINAL_20170628.rds")
# sort metadata by AK ID (it should be already but just in case)
metadata <- metadata[ order(metadata$ak_id), ]

# get list of sample IDs from chipseq dir
# grep for AK*
sample.ids <- list.files(path.chipseq)[ grep(x=list.files(path.chipseq), pattern="^AK") ] 

# now: filter metadata obj only for these AK IDs:
metadata <- metadata[ metadata$ak_id %in% sample.ids, ]

##############################
#
# start code: run analysis for each subtype
#
##############################
for( subtype in c("IDH","MES","RTK_I","RTK_II"))
{
	
message(paste("Running superenhancer analysis for:", subtype))
# sample IDs to analyse, from this subtype:
samples <- metadata$ak_id[ metadata$subtype_final==subtype ]

##############################
#
# first: load all the signal for the subtype's samples
#
##############################
message("Loading sample signal data...")
# example path:
# /icgc/dkfzlsdf/analysis/hipo/hipo_016/analysis/chipseq_superenhancers/sample_signal/AK066_H3K27ac_in_IDH_enhancer_union.tab
#
# so: build paths for each sample's file, then load as a GRangesList:
path.signal.samples <- paste( output.dir, "/sample_signal/", samples, "_H3K27ac_in_", subtype, "_enhancer_union.tab", sep="" )
#
# each of these .tab files has following columns (as per bigWigAverageOverBed output):
# 	name (of region), region size (bp), # covered bp in region, sum (of bigWig), mean0 (mean of bp cov, non-covered bases = 0), mean (mean of bp cov, covered bases only) 
#
# as the region size is the same for all samples: take 'sum' as the signal intensity
# 		as this is most comparable to the read-counting-based method in ROSE2 (mean... averages over gaps in the SE)
#
# read in that column (#4) as the per-sample information into a dataframe:
# use as rownames the region names from first file read in
#
# have variable #samples per subtype so also need to account for that...
# first read in first sample: 
signal.samples <- data.frame( read.delim(path.signal.samples[1], header=F)[,4], row.names=read.delim(path.signal.samples[1], header=F)[,1])

# then read in all following samples...
for( i in 2:length(path.signal.samples) )
{
	signal.samples <- cbind( signal.samples, read.delim(path.signal.samples[i], header=F)[,4] )
}

# add column names from samples
colnames(signal.samples) <- samples

##############################
#
# now: calculate some summary statistics + plot
#
##############################
# now: generate some basic stats, to plot, to see how variable etc. the signal is:
#
# match based on 'samples' vector
signal.samples$sample_mean <- rowMeans( signal.samples[,as.character(samples)], na.rm=T )
signal.samples$sample_median <- apply( X=signal.samples[,as.character(samples)], MARGIN=1, FUN=median )
signal.samples$sample_sd <- apply( X=signal.samples[,as.character(samples)], MARGIN=1, FUN=sd )

##############################
#
# plots:
#
##############################
message("Generate basic summary plots for signal...")
# first: plot each summary stat on its own
# mean:
outputname <- paste( "./plots/", Sys.Date(), "_", subtype, "_superenhancers_subtype_mean_signal.png", sep="" )
plottitle <- paste( subtype, "subtype superenhancers\nMean (SES normalised) signal" )
png(outputname)
p <- ggplot( signal.samples, aes(x=sample_mean) ) + geom_histogram(binwidth=100) + ggtitle(plottitle)
p
dev.off()
# median:
outputname <- paste( "./plots/", Sys.Date(), "_", subtype, "_superenhancers_subtype_median_signal.png", sep="" )
plottitle <- paste( subtype, "subtype superenhancers\nMedian (SES normalised) signal" )
png(outputname)
p <- ggplot( signal.samples, aes(x=sample_median) ) + geom_histogram(binwidth=100) + ggtitle(plottitle)
p
dev.off()
# sd:
outputname <- paste( "./plots/", Sys.Date(), "_", subtype, "_superenhancers_subtype_sd_signal.png", sep="" )
plottitle <- paste( subtype, "subtype superenhancers\nSD of (SES normalised) signal" )
png(outputname)
p <- ggplot( signal.samples, aes(x=sample_sd) ) + geom_histogram(binwidth=100) + ggtitle(plottitle)
p
dev.off()
# also: plot each average vs sd
# mean vs sd:
outputname <- paste( "./plots/", Sys.Date(), "_", subtype, "_superenhancers_subtype_mean_vs_sd_signal.png", sep="" )
plottitle <- paste( subtype, "subtype superenhancers\nMean vs SD of (SES normalised) signal" )
png(outputname)
p <- ggplot( signal.samples, aes(x=sample_mean, y=sample_sd) ) + geom_point() + ggtitle(plottitle)
p
dev.off()
# median:
outputname <- paste( "./plots/", Sys.Date(), "_", subtype, "_superenhancers_subtype_median_vs_sd_signal.png", sep="" )
plottitle <- paste( subtype, "subtype superenhancers\nMedian vs SD of (SES normalised) signal" )
png(outputname)
p <- ggplot( signal.samples, aes(x=sample_median, y=sample_sd) ) + geom_point() + ggtitle(plottitle)
p
dev.off()
# finally: mean vs median:
outputname <- paste( "./plots/", Sys.Date(), "_", subtype, "_superenhancers_subtype_mean_vs_median_signal.png", sep="" )
plottitle <- paste( subtype, "subtype superenhancers\nMean vs median of (SES normalised) signal" )
png(outputname)
p <- ggplot( signal.samples, aes(x=sample_mean, y=sample_median) ) + geom_point() + ggtitle(plottitle)
p
dev.off()

##############################
#
# load the enhancers, merge the signal df with enhancer list, add closest gene, and save
#
##############################
message("Loading enhancers...")
# load stitched enhancers:
enh <- read.table( paste(subtype,"_subtype_enhancer_union_12500_stitched.bed", sep=""), header=T, sep="\t",
	col.names=c("chrom", "start", "end", "width", "strand", "NUM_LOCI", "CONSTITUENT_SIZE", "name"), stringsAsFactors=F )
	
# add the name of the region to rownames:
rownames(enh) <- enh$name

# now: merge by matching rownames (!)	
enh <- merge(enh, signal.samples, by=0)	

# clean up df:
# drop column 'Row.names'
enh <- enh[,colnames(enh)!="Row.names"]

##############################
# add closest gene to regions
##############################
message("Finding nearest gene to superenhancers...")

################
# find nearest gene: use nearest() 
################
# first need enhancers as a GRanges
enh.gr <- GRanges( seqnames=enh$chrom, IRanges(enh$start, enh$end), name=enh$name )

# find ALL nearest gene to enhancer; look up gene symbol in subject GR; then add this to the enh df
#
# add both symbol and ENSG ID
#
# first: find all nearest genes
se.genes <- nearest(enh.gr, genes, select="all")
# use this hits object and convert it to a 2-col df with query(SE) and subject(gene) cols
se.genes <- data.frame( query=enh.gr$name[se.genes@queryHits], subject=genes$symbol[se.genes@subjectHits] )
# now: collapse based on SE ID
se.genes <- data.frame( query=unique(se.genes$query), 
	proximal_genes=( sapply( X=unique(se.genes$query), FUN=function(rows) paste( as.character(se.genes$subject[ se.genes$query %in% rows ]), collapse="_" ) )) 
	)
# add back to GR as ID (for later use)
enh.gr$id <- paste( enh.gr$name, se.genes$proximal_genes[match(se.genes$query, enh.gr$name)], sep="_" )

###############################

################
# save:
#################
outputname <- paste( subtype, "_subtype_enhancer_union_12500_stitched_with_subtype_sample_signal.bed", sep="" )
write.table( x=enh, file=outputname, row.names=F, sep="\t", quote=F )

########################################################################################################################
########################################################################################################################
#
# START SE CALLING CODE BASED ON ROSE2 PIPELINE
# see https://github.com/BradnerLab/pipeline/blob/master/ROSE2_callSuper.R
# using commit: https://github.com/BradnerLab/pipeline/commit/7216beb28174715e7416288e1b6536d8f7b02b7d
#
########################################################################################################################
########################################################################################################################

message("Start ROSE2 analysis...")


#============================================================================
#===================SUPER-ENHANCER CALLING AND PLOTTING======================
#============================================================================


#============================================================================
#==============================INPUT ARGUMENTS===============================
#============================================================================

#ARGS
outFolder <- output.dir
enhancerFile <- enh
enhancerName <- paste(subtype,"_subtype_enhancers", sep="")
#wceName = args[6]

#============================================================================
#================================DATA INPUT==================================
#============================================================================


#get enhancer regions with closestGene columns (? closestGene not needed)
stitched_regions <- enhancerFile

# define for plots output
rankBy_factor <- enhancerName

# rank the regions by the mean signal
# have no WCE - signal already normalised by SES
rankBy_vector <- as.numeric(stitched_regions$sample_mean)

#SETTING NEGATIVE VALUES IN THE rankBy_vector to 0
rankBy_vector[rankBy_vector < 0] <- 0

#============================================================================
#======================SETTING ORIGINAL ROSE CUTOFFS=========================
#============================================================================

#FIGURING OUT THE CUTOFF
cutoff_options <- calculate_cutoff(rankBy_vector, drawPlot=FALSE,xlab=paste(rankBy_factor,'_enhancers'),ylab=paste(rankBy_factor,' SES-norm. mean signal'),lwd=2,col=4)

#These are the super-enhancers
superEnhancerRows <- which(rankBy_vector > cutoff_options$absolute)
typicalEnhancers = setdiff( 1:nrow(stitched_regions), superEnhancerRows )
enhancerDescription <- paste(enhancerName," Enhancers\nRanked by ",rankBy_factor,"\nUsing cutoff of ",cutoff_options$absolute," for Super-Enhancers",sep="",collapse="")

#============================================================================
#========================MAKING SUPER HOCKEY STICK===========================
#============================================================================


#MAKING HOCKEY STICK PLOT
plotFileName = paste(outFolder,"/", enhancerName,"_Plot_points.png",sep="")
png(filename=plotFileName,height=600,width=600)
signalOrder = order(rankBy_vector,decreasing=TRUE)
#if(wceName == 'NONE'){
	plot(length(rankBy_vector):1,rankBy_vector[signalOrder], col='red', xlab=paste( length(typicalEnhancers), rankBy_factor ), 
	ylab="SES-norm. mean H3K27ac signal in subtype", pch=19, cex=0.7)	
	
	#}else{
#	plot(length(rankBy_vector):1,rankBy_vector[signalOrder], col='red',xlab=paste(rankBy_factor,'_enhancers'),ylab=paste(rankBy_factor,' Signal','- ',wceName),pch=19,cex=2)
#}
abline(h=cutoff_options$absolute,col='grey',lty=2)
abline(v=length(rankBy_vector)-length(superEnhancerRows),col='grey',lty=2)
lines(length(rankBy_vector):1,rankBy_vector[signalOrder],lwd=4, col='red')
text(0,0.8*max(rankBy_vector),paste(' Cutoff used: ',cutoff_options$absolute,'\n','Superenhancers identified: ',length(superEnhancerRows)),pos=4)

dev.off()



#============================================================================
#======================SETTING STRETCH ROSE CUTOFFS==========================
#============================================================================



#FIGURING OUT THE CUTOFF

stretch_vector = abs(as.numeric(stitched_regions$CONSTITUENT_SIZE))

stretch_cutoff_options <- calculate_cutoff(stretch_vector, drawPlot=FALSE,xlab=paste(rankBy_factor,'_enhancers'),ylab=paste(rankBy_factor,' enhancer lengths'),lwd=2,col=4)


#These are the stretch-enhancers
stretchEnhancerRows <- which(stretch_vector > stretch_cutoff_options$absolute)
typicalStretchEnhancers = setdiff(1:nrow(stitched_regions), stretchEnhancerRows)
stretchEnhancerDescription <- paste(enhancerName," Enhancers\nRanked by ",rankBy_factor," lengths\nUsing cutoff of ", stretch_cutoff_options$absolute," for Stretch-Enhancers",sep="",collapse="")


#============================================================================
#=========================MAKING STRETCH ROSE PLOTS==========================
#============================================================================

#MAKING HOCKEY STICK PLOT
plotFileName = paste(outFolder,"/", enhancerName,'_Plot_points_stretch.png',sep='')
png(filename=plotFileName,height=600,width=600)
signalOrder = order(stretch_vector,decreasing=TRUE)

plot(length(stretch_vector):1, stretch_vector[signalOrder], col='red',xlab=paste(rankBy_factor,'_enhancers'),ylab=paste(rankBy_factor,' lengths (bp)'),pch=19,cex=0.7)	
	

abline(h=stretch_cutoff_options$absolute,col='grey',lty=2)
abline(v=length(stretch_vector)-length(stretchEnhancerRows),col='grey',lty=2)
lines(length(stretch_vector):1, stretch_vector[signalOrder],lwd=4, col='red')
text(0,0.8*max(stretch_vector),paste(' Cutoff used: ',stretch_cutoff_options$absolute,'\n','Stretch-Enhancers identified: ',length(stretchEnhancerRows)),pos=4)

dev.off()



#============================================================================
#================================MAKING PANEL PLOTS==========================
#============================================================================

#MAKING NEW HOCKEY STICK PLOT
plotFileName = paste(outFolder,"/",enhancerName,'_Plot_panel.png',sep='')
png(filename=plotFileName,height=600,width=1200)
par(mfrow= c(1,3))


#FIRST THE HOCKEY
signalOrder = order(rankBy_vector,decreasing=TRUE)
enhancerOrder = signalOrder
plot(length(rankBy_vector):1, rankBy_vector[enhancerOrder], col='red',xlab='Enhancers ranked by increasing signal',ylab='Enhancer signal (SES norm.)',lwd=2,type='l')

points(length(rankBy_vector):(length(rankBy_vector)-length(superEnhancerRows)+1),rankBy_vector[enhancerOrder[1:length(superEnhancerRows)]],pch=19,cex=1,col='red')
points((length(rankBy_vector)-length(superEnhancerRows)):1,rankBy_vector[enhancerOrder[(length(superEnhancerRows)+1):length(enhancerOrder)]],pch=19,cex=0.75,col='grey')

abline(h=cutoff_options$absolute,col=rgb(0.3,0.3,0.3),lty=2)
abline(v=length(rankBy_vector)-length(superEnhancerRows),col=rgb(0.3,0.3,0.3),lty=2)
text(0,0.8*max(rankBy_vector),paste(' Cutoff used: ',cutoff_options$absolute,'\n','Super-Enhancers identified: ',length(superEnhancerRows)),pos=4)



#THEN THE SCATTER

allSEs = union(superEnhancerRows,stretchEnhancerRows)
superStretch = intersect(superEnhancerRows,stretchEnhancerRows)


enhMagnitude = magnitude(stretch_vector[allSEs]/max(stretch_vector),rankBy_vector[allSEs]/max(rankBy_vector))

m =  as.matrix(cbind(stretch_vector[allSEs]/max(stretch_vector),rankBy_vector[allSEs]/max(rankBy_vector)))
mDiag = apply(m,1,sum)/2
mDist = sqrt(2*(m[,1]-mDiag)^2)
mDist[which(m[,2] > m[,1])] <- mDist[which(m[,2] > m[,1])]*-1



plot(mDist, enhMagnitude,cex=0.75,col='grey',ylim =c(-.05,1),xlim = c(-0.5,0.5),xlab='Enhancer skew',ylab='Enhancer combined magnitude')

ssSubset = c()
for(x in 1:length(allSEs)){
	if(length(which(superStretch == allSEs[x])) > 0){
		ssSubset = c(ssSubset,x)
		
	}
	
}

points(mDist[ssSubset],enhMagnitude[ssSubset],pch=19,cex=1,col='red')
abline(h=0)
abline(v=0)

text(0,-.05,"MORE SUPER",pos=2)
text(0,-.05,"MORE STRETCH",pos=4)
legend(-.5,.95,c(paste(length(superStretch),'SUPER AND STRETCH')),pch=19,col='red')



#THEN STRETCH
signalOrder = order(stretch_vector,decreasing=FALSE)
enhancerOrder = signalOrder


plot(1:length(stretch_vector), stretch_vector[rev(enhancerOrder)], col='red',xlab='Enhancers ranked by decreasing length',ylab='Enhancer length (bm)',lwd=2,type='l')

points(1:length(stretchEnhancerRows), stretch_vector[enhancerOrder[length(stretch_vector):(length(stretch_vector)-length(stretchEnhancerRows)+1)]],pch=19,cex=1,col='red')
points(length(stretchEnhancerRows):length(stretch_vector), stretch_vector[enhancerOrder[(length(typicalStretchEnhancers)+1):1]],pch=19,cex=0.75,col='grey')

abline(h=stretch_cutoff_options$absolute,col=rgb(0.3,0.3,0.3),lty=2)
abline(v=length(stretchEnhancerRows),col=rgb(0.3,0.3,0.3),lty=2)
text(length(stretch_vector),0.8*max(stretch_vector),paste(' Cutoff used: ',stretch_cutoff_options$absolute,'\n','Stretch-Enhancers identified: ',length(stretchEnhancerRows)),pos=2)

dev.off()


#============================================================================
#============================WRITING SUPER OUTPUT============================
#============================================================================

message("Writing superenhancer output...")

#Writing a bed file
bedFileName = paste(outFolder,"/", enhancerName,'_Enhancers_withSuper.bed',sep='')
convert_stitched_to_bed(stitched_regions,paste(rankBy_factor,"Enhancers"), enhancerDescription,bedFileName,score=rankBy_vector,splitSuper=TRUE,superRows= superEnhancerRows,baseColor="0,0,0",superColor="255,0,0")

#This matrix is just the super_enhancers
true_super_enhancers <- stitched_regions[superEnhancerRows,]

additionalTableData <- matrix(data=NA,ncol=2,nrow=nrow(stitched_regions))
colnames(additionalTableData) <- c("enhancerRank","isSuper")
additionalTableData[,1] <- nrow(stitched_regions)-rank(rankBy_vector,ties.method="first")+1
additionalTableData[,2] <- 0
additionalTableData[superEnhancerRows,2] <- 1


#Writing enhancer and super-enhancer tables with enhancers ranked and super status annotated
enhancerTableFile = paste(outFolder,"/",enhancerName,'_AllEnhancers.table.txt',sep='')
writeSuperEnhancer_table(stitched_regions, enhancerDescription,enhancerTableFile, additionalData= additionalTableData)

superTableFile = paste(outFolder,"/",enhancerName,'_SuperEnhancers.table.txt',sep='')
writeSuperEnhancer_table(true_super_enhancers, enhancerDescription,superTableFile, additionalData= additionalTableData[superEnhancerRows,])



#============================================================================
#============================WRITING STRETCH ROSE============================
#============================================================================

message("Writing stretch enhancer output...")

#Writing a bed file
bedFileName = paste(outFolder,"/",enhancerName,'_Enhancers_withStretch.bed',sep='')
convert_stitched_to_bed(stitched_regions,paste(rankBy_factor,"Enhancers"), enhancerDescription,bedFileName,score= stretch_vector,splitSuper=TRUE,superRows= stretchEnhancerRows,baseColor="0,0,0",superColor="255,0,0")



#This matrix is just the super_enhancers
true_stretch_enhancers <- stitched_regions[stretchEnhancerRows,]

additionalTableData <- matrix(data=NA,ncol=2,nrow=nrow(stitched_regions))
colnames(additionalTableData) <- c("enhancerRank","isStretch")
additionalTableData[,1] <- nrow(stitched_regions)-rank(stretch_vector,ties.method="first")+1
additionalTableData[,2] <- 0
additionalTableData[stretchEnhancerRows,2] <- 1


#Writing enhancer and stretch-enhancer tables with enhancers ranked and stretch status annotated
enhancerTableFile = paste(outFolder,"/",enhancerName,'_AllEnhancers_Length.table.txt',sep='')
writeSuperEnhancer_table(stitched_regions, enhancerDescription,enhancerTableFile, additionalData= additionalTableData)

stretchTableFile = paste(outFolder,"/",enhancerName,'_StretchEnhancers.table.txt',sep='')
writeSuperEnhancer_table(true_stretch_enhancers, enhancerDescription,stretchTableFile, additionalData= additionalTableData[stretchEnhancerRows,])



#============================================================================
#================================WRITING 2D ROSE=============================
#============================================================================

message("Writing 2D ROSE output...")

#Writing a bed file
bedFileName = paste(outFolder,"/",enhancerName,'_Enhancers_withSuperStretch.bed',sep='')
convert_stitched_to_bed(stitched_regions,paste(rankBy_factor,"Enhancers"), enhancerDescription,bedFileName,score= stretch_vector,splitSuper=TRUE,superRows= superStretch,baseColor="0,0,0",superColor="255,0,0")

#This matrix is just the super_enhancers
true_superStretch_enhancers <- stitched_regions[superStretch,]
print(length(superStretch))
print(dim(true_superStretch_enhancers))
additionalTableData <- matrix(data=NA,ncol=2,nrow=nrow(stitched_regions))
colnames(additionalTableData) <- c("enhancerRank","isSuperStretch")


enhMagnitude = magnitude(stretch_vector/max(stretch_vector),rankBy_vector/max(rankBy_vector))
additionalTableData[,1] <- nrow(stitched_regions)-rank(enhMagnitude,ties.method="first")+1
additionalTableData[,2] <- 0
additionalTableData[superStretch,2] <- 1


#Writing enhancer and superStretch-enhancer tables with enhancers ranked and superStretch status annotated
enhancerTableFile = paste(outFolder,"/",enhancerName,'_AllEnhancers_SuperStretch.table.txt',sep='')
writeSuperEnhancer_table(stitched_regions, enhancerDescription,enhancerTableFile, additionalData= additionalTableData)

superStretchTableFile = paste(outFolder,"/",enhancerName,'_SuperStretchEnhancers.table.txt',sep='')
writeSuperEnhancer_table(true_superStretch_enhancers, enhancerDescription,superStretchTableFile, additionalData= additionalTableData[superStretch,])

##############################
# end subtype loop
##############################
}

##############################
# save session info (just in case):
##############################
# output session info
seshinf <- paste ( Sys.Date(), "_superenhancers_03_run_analysis_sessionInfo.txt", sep="" )
writeLines( capture.output(sessionInfo()), seshinf )		
message("Finished analysis!")